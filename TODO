# Code

- make dependencies subrepositories
- build dependancies in make
- changes to rust-http to enable protocol upgrades without the current hacky
  approach in rust-ws
- cleanly drop associated tasks - eg when the read task fails, the write task
  ought to be fail!-ed, even if it is waiting on a separate Chan read. maybe
  drop all chans/ports somehow when either task has an IoError on TcpStream
  operations?
- ws clients. right now, it assumes a ws server, but a lot of the code is
  common to both clients and servers. factor that out and create
  a WebSocketClient trait
- get closer to RFC 6455 in terms of what connections are accepted and what are
  rejected. right now, some invalid things are allowed. eg there's no check for
  "Connection: Upgrade" header, or the "Sec-WebSocket-Version: 13" header
- pass http://autobahn.ws/testsuite/
- internal unit tests
- benchmarks, comparisons, optimization

# Missing Support

- closing handshake
- ping/pong frames
- fragmented messages
- TLS
- ws extensions, like deflate etc that chrome/ff use
  - Chrome
    Sec-Websocket-Extensions: permessage-deflate; client_max_window_bits, x-webkit-deflate-frame
- Sec-WebSocket-Protocol? don't know if anyone uses that, despite it's presence in the RFC

# Examples

- chat example
- cursor sharing example
- demo of 3d physics server for mmo game
